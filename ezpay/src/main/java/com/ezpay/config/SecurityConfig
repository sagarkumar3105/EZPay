package com.EzPayApplication.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

/**
 * Configuration class for setting up security features in the application.
 * It defines password encoding and configures security rules for HTTP requests.
 */
@Configuration
public class SecurityConfig {
	 /**
     * Configures and returns a BCryptPasswordEncoder bean for password encryption.
     *
     * @return a PasswordEncoder instance that uses the BCrypt hashing algorithm
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
    	// Business Logic: Use BCryptPasswordEncoder for secure password hashing
        return new BCryptPasswordEncoder();
    }
    /**
     * Configures the security filter chain to manage access to various HTTP endpoints.
     *
     * @param http the HttpSecurity object used to configure security settings
     * @return a SecurityFilterChain that defines the security configuration for HTTP requests
     * @throws Exception if there is an error configuring the security chain
     */
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    	  // Business Logic: Disable CSRF protection for non-browser clients and permit access to password recovery endpoints
        http
            .csrf().disable()  // Disable CSRF protection for non-browser clients
            .authorizeRequests()
                .requestMatchers("/api/password/forgot", "/api/password/reset").permitAll()  // Allow access to password recovery APIs
                .anyRequest().authenticated()  // All other endpoints require authentication
            .and()
            .formLogin().disable();  // Disable form-based login, as it's not needed for this configuration

        return http.build();
    }
}
