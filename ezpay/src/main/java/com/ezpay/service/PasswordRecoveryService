package com.EzPayApplication.service;

import com.EzPayApplication.entity.Customer;
import com.EzPayApplication.entity.LoginData;
import com.EzPayApplication.entity.PasswordRecoveryDetails;
import com.EzPayApplication.repository.CustomerRepository;
import com.EzPayApplication.repository.LoginDataRepository;
import com.EzPayApplication.repository.PasswordRecoveryDetailsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;


/**
 * Service class to handle password recovery operations like creating a reset token, sending emails, 
 * and resetting the password.
 */

@Service
public class PasswordRecoveryService {

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private PasswordRecoveryDetailsRepository passwordRecoveryDetailsRepository;

    @Autowired
    private LoginDataRepository loginDataRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JavaMailSender mailSender;

    /**
     * Creates a password reset token for the customer identified by the provided email or mobile number.
     * If an active token exists, it reuses it unless it is expired or already used.
     *
     * @param emailOrMobile the registered email or mobile number of the customer
     * @return a message indicating that the reset link has been sent, or an error if the account is not found
     */
    public String createPasswordResetToken(String emailOrMobile) {
        Optional<Customer> customerOptional = customerRepository.findByEmail(emailOrMobile)
                .or(() -> customerRepository.findByMobileNumber(emailOrMobile));
        
        //Check for the customer with provided email and mobile number
        if (customerOptional.isPresent()) {
            Customer customer = customerOptional.get();
            
            // Check if there's an existing, active token for this customer
            Optional<PasswordRecoveryDetails> existingToken = passwordRecoveryDetailsRepository.findByCustomer(customer);
            PasswordRecoveryDetails recoveryDetails;

            if (existingToken.isPresent()) {
                recoveryDetails = existingToken.get();

                // Check if the existing token is expired or already used
                if (recoveryDetails.isResetTokenExpired() || recoveryDetails.getIsTokenUsed()) {
                    // If expired or used, generate a new token
                    recoveryDetails.setToken(UUID.randomUUID().toString());
                    recoveryDetails.setTokenCreationDate(LocalDateTime.now());
                    recoveryDetails.setTokenExpirationDate(LocalDateTime.now().plusHours(24)); // Token valid for 24 hours
                    recoveryDetails.setIsTokenUsed(false);  // Reset token usage status
                } else {
                    // If the existing token is still valid and not used, just reuse it
                    return "Password reset link has already been sent to " + customer.getEmail();
                }
            } else {
                // If no token exists, create a new one
                recoveryDetails = new PasswordRecoveryDetails();
                recoveryDetails.setCustomer(customer);
                recoveryDetails.setToken(UUID.randomUUID().toString());
                recoveryDetails.setTokenCreationDate(LocalDateTime.now());
                recoveryDetails.setTokenExpirationDate(LocalDateTime.now().plusMinutes(10));  // Token valid for 10 minutes
                recoveryDetails.setIsTokenUsed(false);
            }

            passwordRecoveryDetailsRepository.save(recoveryDetails);

            // Send reset link via email
            sendPasswordResetEmail(customer.getEmail(), recoveryDetails.getToken());

            return "Password reset link sent to " + customer.getEmail();
        } else {
            throw new IllegalArgumentException("No account found with the provided email or mobile number.");
        }
    }
    /**
     * Sends a password reset email to the user with the provided email address.
     *
     * @param recipientEmail the email address of the recipient
     * @param token the password reset token to be included in the email
     */
    private void sendPasswordResetEmail(String recipientEmail, String token) {
    	// Business Logic: Construct the reset link and send an email to the customer
        String resetLink = "http://localhost:8600/api/password/reset?token=" + token;
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(recipientEmail);
        message.setSubject("Password Reset Request");
        message.setText("Click the link to reset your password: " + resetLink);
        message.setFrom("no-reply@ezpay.com");

        mailSender.send(message);  // Send the email
    }


    /**
     * Validates the provided password reset token and resets the user's password.
     *
     * @param token the password reset token
     * @param newPassword the new password to set for the user
     * @return a message indicating the result of the password reset operation
     */
    public String resetPassword(String token, String newPassword) {
        Optional<PasswordRecoveryDetails> recoveryDetailsOptional = passwordRecoveryDetailsRepository.findByToken(token);

        if (recoveryDetailsOptional.isPresent()) {
            PasswordRecoveryDetails recoveryDetails = recoveryDetailsOptional.get();
             
            // Business Logic: Check if the token has expired
            if (recoveryDetails.isResetTokenExpired()) {
                throw new IllegalArgumentException("The reset link has expired.");
            }
         // Business Logic: Check if the token has already been used
            if (recoveryDetails.getIsTokenUsed()) {
                throw new IllegalArgumentException("The reset link has already been used.");
            }

            Customer customer = recoveryDetails.getCustomer();
            
            // Fetch LoginData using customer reference
            Optional<LoginData> loginDataOptional = loginDataRepository.findByCustomer(customer);

            if (loginDataOptional.isPresent()) {
                LoginData loginData = loginDataOptional.get();
             // Business Logic: Encrypt and set the new password for the customer
                loginData.setPassword(passwordEncoder.encode(newPassword));  
                loginDataRepository.save(loginData); // Save the updated password

             // Update the token's status to indicate it has been used
                recoveryDetails.setIsTokenUsed(true);
                passwordRecoveryDetailsRepository.save(recoveryDetails);

                return "Password reset successfully.";
            } else {
                throw new IllegalArgumentException("No login data found for the user.");
            }
        } else {
            throw new IllegalArgumentException("Invalid password reset token.");
        }
    }
}
